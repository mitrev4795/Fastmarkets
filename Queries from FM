 with user_logons as (
  select l.d_user_id user_id,
  u.api_username_current, 
  u.d_company_id, 
  u.sf_contact_id,
  l.event_date
  from mrt.m_logons_aggregated l   -- mrt.f_logons l
  left join (select DISTINCT * from mrt.f_subscriptions where  d_product_id in (56,23)) s 
	on s.d_user_id = l.d_user_id and 
  RIGHT join mrt.d_users u on u.id = l.d_user_id  -- why not left?
  where 1=1
  --d_user_id = 5511 and 
  and l.event_date > '2023-02-01'
  and u.is_internal = 'No'
  --and l.auth_action_type = 'Logon'
  --group by d_user_id,d_client_id,d_session_id,auth_action_type,event_date
-- order by event_date desc 
 )


 SELECT distinct
 s.d_user_id, s.d_company_id
 --, s.d_product_id
 --, s.d_ncu_publication_id
 , s.start_date, s.expire_date, s.end_date, s.trial_end_date, s.sf_order_number,
 s.sf_opportunity_name
 , s.d_product_id, s.d_ncu_publication_id
 , p.id, p.name, p.code, p.currency, p.type, ul.user_id
 , ul.api_username_current, ul.d_company_id, ul.sf_contact_id,
 ul.event_date
 --, ul.event_timestamp
 , c.* ,
 us.api_username_current as user_email
  FROM ( select DISTINCT * from mrt.f_subscriptions where  d_product_id in (56,23)) s   -- Because only FM PLatform access    -- [mrt].f_subscriptions s 
  -- the issue in the from clause is that it joins on user_id all the tables that follow. If there is another order attached to these clients it will mix it up
  -- Final number of rows should match what we have in the logons table 
  LEFT JOIN [mrt].d_products p on p.id = s.d_product_id --and p.code  like 'MFT%'
  left join user_logons ul on ul.user_id = s.d_user_id
  join mrt.d_companies c on c.id = s.d_company_id
  left join [mrt].d_users us on us.id = s.d_user_id 
  --where sf_order_number = 00503844
  where s.start_date > '2023-02-01'
  and sf_order_number = 00522851 -- 00522323
  and s.end_date > cast(GETDATE() as date)
  --and s.d_user_id = 1148530
  --and s.d_company_id = 188610
  --and sf_account_id = '0016Q00001ZlqTtQAJ'
  --and ul.api_username_current = 'dan.popa@artrom.com'
  order by sf_order_number, d_user_id
  ;
  
  
  
  
------------------------
QUERY FOR GLOBAL 
with price_usage as (
select pra.event_date, pra.d_user_id, pra.d_instrument_id, sum(pra.requests_count) RequestCount
from [mrt].[m_price_requests_aggregated] pra
  WHERE 1=1
  AND pra.event_date > '2023-01-01'
  and pra.d_price_type_id = 1 -- physical price only (alternative is to include market prices, id = 2 - LME etc.)
  and pra.d_action_id in (1,5,8,11)  -- what those mean you can check in action table
  --and pra.d_user_id = 1
group by pra.event_date, pra.d_user_id, pra.d_instrument_id )

select pra.*
,u.api_username_current, u.d_company_id, u.type user_type
,i.symbol, i.packages, i.name instrument_name, i.type
,c.customer_success_manager, c.name company_name, c.sf_account_id, c.type company_type
--,s.start_date, s.expire_date, s.end_date, s.sf_order_number, s.sf_opportunity_name
from price_usage pra
join mrt.d_users u on pra.d_user_id = u.id
join mrt.d_instruments i on i.d_instrument_id = pra.d_instrument_id
join mrt.d_companies c on c.id = u.d_company_id 
--join (select DISTINCT * from  mrt.f_subscriptions where d_product_id in (56,23)) s on s.d_user_id = pra.d_user_id
where u.is_internal = 'No'
--and pra.event_date between s.start_date and s.end_date
--and pra.d_user_id = 3006
and EXISTS (SELECT 1 FROM mrt.f_subscriptions s where s.d_user_id = pra.d_user_id and pra.event_date between s.start_date and s.expire_date and s.d_product_id in (56,23))
-- AGAIN, WE RUN THE ISSUE OF OVERLAPPING TWO ORDERS FOR 1 USER AND DUPLICATING ROWS 
--and pra.d_user_id = 1
